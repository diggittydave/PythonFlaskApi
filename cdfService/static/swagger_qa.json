{
  "openapi": "3.0.0",
  "info": {
    "description": "Basic setup for SWAGGERUI documentation",
    "version": "1.0.0",
    "title": "CDF Service Boilerplate",
    "contact": {
      "email": "david.weber@expeditors.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "Home": {
      "name": "Home",
      "url": "https://cdfserviceqa.chq.ei:8000/webapp/login"
    }
  },
  "servers": [
    {
      "url": "https://cdfserviceqa.chq.ei:8000/"
    }
  ],
  "tags": [
    {
      "name": "CDF Service",
      "description": "API providing real time data on EDI configuration CDF files."
    }
  ],
  "paths": {
    "/api/token_gen": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "/api/token_gen - token generation path."
        ],
        "summary": "Generates a jwt token for use accessing jwt endpoints.",
        "operationId": "login_service()",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tokenSchema"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/cdf/list": {
      "get": {
        "tags": [
          "/api/cdf/list - returns full list of CDFs"
        ],
        "summary": "Returns a full list of available CDF's in the database. This enpoint is data intensive and not recommended for operational use.",
        "operationId": "allCDF()",
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "description": "Authorization token generated by the /token_gen route.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/tokenSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/cdf/list/{key}": {
      "get": {
        "tags": [
          "/cdf/list/{key} - Small list of cdfs."
        ],
        "summary": "Gets a list of CDFs based on a search key in the GET request URL",
        "operationId": "smallList(key)",
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "description": "Authorization token generated by the /token_gen route.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/tokenSchema"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Search string submitted by user.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/KeySchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/cdf/ID_KEY/{ID_KEY}": {
      "get": {
        "tags": [
          "/cdf/ID_KEY/{ID_KEY} - Single CDF route."
        ],
        "summary": "Route returns all data on a single CDF based on the ID Key in the url.",
        "operationId": "getCDF(ID_KEY)",
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "description": "Authorization token generated by the /token_gen route.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/tokenSchema"
            }
          },
          {
            "name": "ID_KEY",
            "in": "path",
            "description": "ID Key of the CDF being requested. Is passed into getCDF() function.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/KeySchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/webapp/services/webcheck": {
      "get": {
        "tags": [
          "/services/webcheck - basic webcheck route"
        ],
        "summary": "Basic Webcheck route.",
        "operationId": "webCheck()",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/cdf/update/ID_KEY/{ID_KEY}": {
      "post": {
        "tags": [
          "/cdf/update/ID/KEY/{ID_KEY} - CDF Update endpoint"
        ],
        "summary": "Update Endpoint used in automation process.",
        "operationId": "postChange()",
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "description": "Authorization token generated by the /token_gen route.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/tokenSchema"
            }
          },
          {
            "name": "ID_KEY",
            "in": "path",
            "description": "ID Key of the CDF being requested. Is passed into getCDF() function.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/KeySchema"
            }
          },
          {
            "name": "data",
            "in": "query",
            "description": "Data content of updated lines. Post should contain all lines to reduce number of updates, as well as keep updates FIFO. Each line should be separated by /r/n.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CDFUpdateSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication Information is missing or invalid",
        "headers": {
          "WWW_Authenticate": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "schemas": {
      "tokenSchema": {
        "type": "string"
      },
      "KeySchema": {
        "type": "string"
      },
      "CDFUpdateSchema": {
        "type": "string"
      },
      "CDFContentSchema": {
        "type": "object",
        "properties": {
          "ID_KEY": {
            "type": "string",
            "format": "string"
          },
          "CDF_NAME": {
            "type": "string",
            "format": "string"
          },
          "CDF_PATH": {
            "type": "string",
            "format": "string"
          },
          "Transportation": {
            "type": "string",
            "format": "string"
          },
          "OM": {
            "type": "string",
            "format": "string"
          },
          "Billing": {
            "type": "string",
            "format": "string"
          },
          "Is_Restricted": {
            "type": "string",
            "format": "string"
          },
          "Approvers": {
            "type": "string",
            "format": "string"
          },
          "Date_Updated": {
            "type": "string",
            "format": "date"
          },
          "HEADER": {
            "type": "string",
            "format": "string"
          },
          "NUMBER OF COLUMNS": {
            "type": "integer",
            "format": "string"
          },
          "FILE_CONTENTS": {
            "type": "string",
            "format": "string"
          },
          "LAST_UPD_BY": {
            "type": "string",
            "format": "string"
          },
          "Requires_Approval": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "CDFNamesSchema": {
        "type": "object",
        "properties": {
          "ID_KEY": {
            "type": "string",
            "format": "number"
          }
        }
      }
    }
  }
}